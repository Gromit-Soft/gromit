/*******************************************************************************
 * 
 * Copyright 2015-2016 Gromit Soft Team   
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 ******************************************************************************/

defaultTasks 'jar', 'distZip2'

apply plugin: 'checkstyle'
apply plugin: 'java'
apply plugin: 'maven'

group = 'org.gromitsoft'
version = '0.1-SNAPSHOT'


repositories {
    mavenCentral()
    maven {
        url 'http://oss.sonatype.org/content/groups/public'
    }
}

configurations {
    provided
}

dependencies {
    provided 'org.apache.tomcat:tomcat-servlet-api:7.0.37'
}

sourceSets.main.compileClasspath += [configurations.provided]

artifacts {
    archives jar
}

/*
 * This section deals with processing and combining JavaScript files.  Our JavaScript files have some specific
 * dependencies where we must load some files ahead of others.  This section specifies the file tree in a specific
 * order so our JavaScript dependencies are loaded properly in the index.html file.
 */
FileCollection jsFiles = files('src/main/js/gromit.js', 'src/main/js/rest.js', 'src/main/js/util.js', 'src/main/js/oauth.js', 'src/main/js/services/i18n/localizationService-en.js')
    
jsFiles = jsFiles + fileTree(
    dir: 'src/main/js', 
    includes: ['*.js'],
    excludes: ['iac.js', 'rest.js', 'util.js', 'oauth.js', 'main.js'])
    
jsFiles = jsFiles + fileTree(
    dir: 'src/main/js', 
    includes: ['directives/**', 'services/**'], 
    excludes: ['**/services/i18n/*'])
    
buildscript {
  repositories {
    mavenCentral()
    maven {
        url 'http://oss.sonatype.org/content/groups/public'
    }
  }
  dependencies {
    classpath 'com.eriwen:gradle-js-plugin:1.12.0'
    classpath 'com.eriwen:gradle-css-plugin:1.11.1'
  }
}

apply plugin: "com.eriwen.gradle.js"
apply plugin: 'css'

minifyJs {
    source = jsFiles
    dest = file("${buildDir}/js/gromit-min.js")
    closure {
        warningLevel = 'DEFAULT'
        compilationLevel = 'WHITESPACE_ONLY'
    }
}

gzipJs {
	doFirst() {
	    println ':gzipJs'
	}
    source = file("${buildDir}/js/gromit-all-min.js")
    dest = file("${buildDir}/js/gromit-all-min.js.gz")
}

/*
 * This is a little class and task that can concatenate files.  We use it to bundle all 
 * of our JavaScript libraries into a single file.  Ideally we should be GZIPing the bundle
 * as well, but I haven't had time for that part yet.
 */
class ConcatFiles extends DefaultTask {
    @InputFiles
    FileCollection files
    @OutputFile
    File target
    @TaskAction
    void concat() {
        target.withWriter { writer ->
            files.each { file ->
                file.withReader { reader ->
                    writer << reader << '\n'
                }
            }
        }
    }
}

task concatLibFiles(type: ConcatFiles) {
    files = files(
        'src/main/js/lib/underscore-min.js',
        'src/main/js/lib/Markdown.Converter.js',
        'src/main/js/lib/Markdown.Sanitizer.js',
        'src/main/js/lib/Markdown.Editor.js',
        'src/main/js/lib/moment-with-locales.min.js',
        'src/main/js/lib/require.js',
        'build/js/gromit-min.js')
    target = file('build/js/gromit-all-min.js')
}

/*
 * This section minimizes and combines our CSS files
 */
FileCollection cssSourceFiles = files('src/main/css/reset.css', 'src/main/css/coreui.css')

FileTree cssSourceFilesTree = fileTree(dir: 'src/main/css')
cssSourceFilesTree.include '*.css'
cssSourceFilesTree.exclude 'coreui.css, reset.css'
cssSourceFiles = cssSourceFiles + cssSourceFilesTree

combineCss {
    source = cssSourceFiles
    dest = "${buildDir}/css/gromit-all.css"
}

minifyCss {
    source = "${buildDir}/css/gromit-all.css"
    dest = "${buildDir}/css/gromit-all-min.css"
    yuicompressor { // Optional
        lineBreakPos = -1
    }
}

gzipCss {
	doFirst() {
	    println ':gzipCss'
	}
    source = "${buildDir}/css/gromit-all-min.css"
    dest = "${buildDir}/css/gromit-all-min.css.gz"
}

checkstyle {
    configFile new File(rootDir, 'src/build/config/checkstyle_checks.xml')
}

/*
 * We want to call JSHint on the command line so we can use the NodeJS version
 * of it.
 */
task jsHint(type:Exec) {
	doFirst() {
	    println ':jsHint'
	}
    description = 'This task handles calling JSHint for the JavaScript files in the project.'
    ignoreExitValue = true
    
	
	if (org.apache.tools.ant.taskdefs.condition.Os.isFamily(org.apache.tools.ant.taskdefs.condition.Os.FAMILY_WINDOWS)) {
		commandLine 'cmd', '/c', 'jshint'
	} else {
		workingDir '.'
		executable 'jshint'
	}
    args jsFiles
	
	logger.info('jsHint commandLine: ' + commandLine)
    doLast {
        if (execResult.exitValue != 0) {
            throw new GradleScriptException("There were JSHint errors.  Look above and fix the issues.", null);
        }
    }
}

task distZip2(type: Jar) {
    from('.') {
        include 'LICENSE.txt'
        include 'README.md'
    }
    
    from('src/main/js') {
        include '**/*'
        into 'js'
    }
    
    from('src/main/css') {
        include '**/*'
        into 'css'
    }
    
    from('build/css') {
        include '**/*'
        into 'css'
    }
    
    from('build/js') {
        include '**/*'
        into 'js'
    }
    
    from('src/main/html') {
        include '**/*'
        into 'html'
    }
}

clean {
    /*FileTree l10nFiles = fileTree(dir: 'src/main/js/services/i18n/')
    l10nFiles.include '*.js'
    delete l10nFiles
    
    l10nFiles.include '*.xlf'
    delete l10nFiles*/
}

compileJava.doFirst {
    tasks.checkstyleMain.execute()
}

jar.doFirst {
    tasks.jsHint.execute()
    tasks.minifyJs.execute()
    tasks.concatLibFiles.execute()
    tasks.gzipJs.execute()
    
    tasks.combineCss.execute()
    tasks.minifyCss.execute()
    tasks.gzipCss.execute()
}

/*
 * We want to install the JAR into the local Maven cache when you build it
 */
distZip2.doLast {
    tasks.install.execute()
}

uploadArchives {
    description = 'This task uploads our artifacts to the Nexus server.'
    if (project.hasProperty('envDeployUser')) {
        repositories {
            mavenDeployer {
                repository(url: "http://nexus.idmapps.nqbuild.lab/nexus/content/repositories/snapshots/") {
                    authentication(userName: envDeployUser, password: envDeployPass)
                }
            }
        }
    } 
}

uploadArchives.doFirst {
    if (!project.hasProperty('envDeployUser')) {
        throw new GradleScriptException("You need to set up the gradle.properties file before you can deploy.  Look at gradle.properties.sample.", null);
    }   
}